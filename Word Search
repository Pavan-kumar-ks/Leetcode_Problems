class Solution {
    public boolean exist(char[][] board, String word) {
        boolean [][] mat = new boolean[board.length][board[0].length];
        int m = board.length;
        int n = board[0].length;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(board[i][j] == word.charAt(0)){
                    if(dfs(board,word,i,j,0,mat)){
                        return true;
                    }
                }
            }
        }
        return false;
    }
    public static boolean dfs(char [][]board,String word,int i,int j,int indexofword,boolean [][]mat){
        int m = board.length;
        int n = board[0].length;
        if(indexofword == word.length()){
            return true;
        }
        if(i<0 || i>=m || j<0 || j>=n|| mat[i][j] || board[i][j] != word.charAt(indexofword)){
            return false;
        }
        mat[i][j] = true;
        boolean found = dfs(board,word,i-1,j,indexofword+1,mat)||
                        dfs(board,word,i+1,j,indexofword+1,mat)||
                        dfs(board,word,i,j-1,indexofword+1,mat)||
                        dfs(board,word,i,j+1,indexofword+1,mat);

        mat[i][j] = false;

        return found;
    }
}
